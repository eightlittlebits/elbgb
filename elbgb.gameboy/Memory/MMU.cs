using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using elbgb.gameboy.Display;

namespace elbgb.gameboy.Memory
{
	class MMU
	{
		public static class Registers
		{
			public const ushort BOOTROMLOCK = 0xFF50;
		}

		private GameBoy _gb;

		private bool _bootRomLocked;

		private byte[] _bootRom =
		{
			0x31,0xFE,0xFF,0xAF,0x21,0xFF,0x9F,0x32,0xCB,0x7C,0x20,0xFB,0x21,0x26,0xFF,0x0E,
			0x11,0x3E,0x80,0x32,0xE2,0x0C,0x3E,0xF3,0xE2,0x32,0x3E,0x77,0x77,0x3E,0xFC,0xE0,
			0x47,0x11,0x04,0x01,0x21,0x10,0x80,0x1A,0xCD,0x95,0x00,0xCD,0x96,0x00,0x13,0x7B,
			0xFE,0x34,0x20,0xF3,0x11,0xD8,0x00,0x06,0x08,0x1A,0x13,0x22,0x23,0x05,0x20,0xF9,
			0x3E,0x19,0xEA,0x10,0x99,0x21,0x2F,0x99,0x0E,0x0C,0x3D,0x28,0x08,0x32,0x0D,0x20,
			0xF9,0x2E,0x0F,0x18,0xF3,0x67,0x3E,0x64,0x57,0xE0,0x42,0x3E,0x91,0xE0,0x40,0x04,
			0x1E,0x02,0x0E,0x0C,0xF0,0x44,0xFE,0x90,0x20,0xFA,0x0D,0x20,0xF7,0x1D,0x20,0xF2,
			0x0E,0x13,0x24,0x7C,0x1E,0x83,0xFE,0x62,0x28,0x06,0x1E,0xC1,0xFE,0x64,0x20,0x06,
			0x7B,0xE2,0x0C,0x3E,0x87,0xE2,0xF0,0x42,0x90,0xE0,0x42,0x15,0x20,0xD2,0x05,0x20,
			0x4F,0x16,0x20,0x18,0xCB,0x4F,0x06,0x04,0xC5,0xCB,0x11,0x17,0xC1,0xCB,0x11,0x17,
			0x05,0x20,0xF5,0x22,0x23,0x22,0x23,0xC9,0xCE,0xED,0x66,0x66,0xCC,0x0D,0x00,0x0B,
			0x03,0x73,0x00,0x83,0x00,0x0C,0x00,0x0D,0x00,0x08,0x11,0x1F,0x88,0x89,0x00,0x0E,
			0xDC,0xCC,0x6E,0xE6,0xDD,0xDD,0xD9,0x99,0xBB,0xBB,0x67,0x63,0x6E,0x0E,0xEC,0xCC,
			0xDD,0xDC,0x99,0x9F,0xBB,0xB9,0x33,0x3E,0x3C,0x42,0xB9,0xA5,0xB9,0xA5,0x42,0x3C,
			0x21,0x04,0x01,0x11,0xA8,0x00,0x1A,0x13,0xBE,0x20,0xFE,0x23,0x7D,0xFE,0x34,0x20,
			0xF5,0x06,0x19,0x78,0x86,0x23,0x05,0x20,0xFB,0x86,0x20,0xFE,0x3E,0x01,0xE0,0x50
		};

		private byte[] _wram;
		private byte[] _hram;

		public MMU(GameBoy gameBoy)
		{
			_gb = gameBoy;

			_bootRomLocked = false;

			_wram = new byte[0x2000];
			_hram = new byte[0x7F];
		}

		public byte ReadByte(ushort address)
		{
			switch (address & 0xF000)
			{
				// rom / boot rom
				case 0x0000:
					if (!_bootRomLocked && address < 0x100)
					{
						return _bootRom[address];
					}

					return _gb.Cartridge.ReadByte(address);
					
				// rom
				case 0x1000:
				case 0x2000:
				case 0x3000:
				case 0x4000:
				case 0x5000:
				case 0x6000:
				case 0x7000:
					return _gb.Cartridge.ReadByte(address);

				// vram
				case 0x8000:
				case 0x9000:
					return _gb.PPU.ReadByte(address);

				// external expansion RAM
				case 0xA000:
				case 0xB000:
					return _gb.Cartridge.ReadByte(address);

				// working ram
				case 0xC000:
				case 0xD000:
					return _wram[address & 0x1FFF];

				// working ram mirror
				case 0xE000:
					return _wram[address & 0x1FFF];

				case 0xF000:
					// working ram mirror
					if (address <= 0xFDFF)
					{
						return _wram[address & 0x1FFF];
					}
					// oam
					if (address >= 0xFE00 && address <= 0xFE9F)
					{
						return _gb.PPU.ReadByte(address);
					}
					// restricted area
					else if (address >= 0xFEA0 && address <= 0xFEFF)
					{
						return 0;
					}
					// timer IO registers
					if (address >= 0xFF04 && address <= 0xFF07)
					{
						return _gb.Timer.ReadByte(address);
					}
					// sound registers
					if (address >= 0xFF10 && address <= 0xFF3F)
					{
						return _gb.PSG.ReadByte(address);
					}
					// lcd registers
					if (address >= 0xFF40 && address <= 0xFF4B)
					{
						return _gb.PPU.ReadByte(address);
					}
					// hi ram
					else if (address >= 0xFF80 && address <= 0xFFFE)
					{
						return _hram[address & 0x7F];
					}
					else
						throw new NotImplementedException();

				default:
					throw new NotImplementedException();
			}
		}

		public void WriteByte(ushort address, byte value)
		{
			switch (address & 0xF000)
			{
				// rom
				case 0x0000:
				case 0x1000:
				case 0x2000:
				case 0x3000:
				case 0x4000:
				case 0x5000:
				case 0x6000:
				case 0x7000:
					_gb.Cartridge.WriteByte(address, value);
					return;

				// vram
				case 0x8000:
				case 0x9000:
					_gb.PPU.WriteByte(address, value);
					return;

				// external expansion RAM
				case 0xA000:
				case 0xB000:
					_gb.Cartridge.WriteByte(address, value);
					return;

				// working ram
				case 0xC000:
				case 0xD000:
					_wram[address & 0x1FFF] = value;
					return;

				// working ram mirror
				case 0xE000:
					_wram[address & 0x1FFF] = value;
					return;

				case 0xF000:
					// working ram mirror
					if (address <= 0xFDFF)
					{
						_wram[address & 0x1FFF] = value;
						return;
					}
					// oam
					if (address >= 0xFE00 && address <= 0xFE9F)
					{
						_gb.PPU.WriteByte(address, value);
						return;
					}
					// restricted area
					else if (address >= 0xFEA0 && address <= 0xFEFF)
					{
						return;
					}
					// timer IO registers
					else if (address >= 0xFF04 && address <= 0xFF07)
					{
						_gb.Timer.WriteByte(address, value);
						return;
					}
					// sound registers
					if (address >= 0xFF10 && address <= 0xFF3F)
					{
						_gb.PSG.WriteByte(address, value);
						return;
					}
					// lcd registers
					if (address >= 0xFF40 && address <= 0xFF4B)
					{
						_gb.PPU.WriteByte(address, value);
						return;
					}
					// hi ram
					else if (address >= 0xFF80 && address <= 0xFFFE)
					{
						_hram[address & 0x7F] = value;
						return;
					}
					else if (address == Registers.BOOTROMLOCK)
					{
						// TODO(david): do we set a value at this location? can we read from it?
						_bootRomLocked = true;
						return;
					}
					else
						throw new NotImplementedException();


				default:
					throw new NotImplementedException();
			}
		}
	}
}
